import asyncio
import logging
import os
from datetime import datetime
import re

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, 
    InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove, FSInputFile, Location
)

import database as db

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = "7686264055:AAHwg2GPH8VnvJRbSv3Ril1ZERbNgXyQF9k"

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
temp_data = {}
os.makedirs("car_photos", exist_ok=True)

class ChatState(StatesGroup):
    chatting = State()

class Registration(StatesGroup):
    phone_number = State()

class PassengerLocation(StatesGroup):
    waiting_for_location = State()

class DriverRegistration(StatesGroup):
    experience = State()
    car_license = State()
    car_photo = State()
    car_model = State()
    car_year = State()
    car_id = State()
    uploading_car_photo = State()
    
class PostRide(StatesGroup):
    from_location = State()
    from_location_map = State()
    to_location = State()
    to_location_map = State()
    date = State()
    time = State()
    price = State()
    seats = State()
    bags = State()
    confirm = State()
    
class EditRide(StatesGroup):
    poster_id = State()
    field = State()
    from_location = State()
    to_location = State()
    date = State()
    time = State()
    price = State()
    seats = State()
    bags = State()
    confirm = State()
    waiting_for_field = State()
    new_time = State()
    new_price = State()
    new_seats = State()
    new_bags = State()
    
class BookRide(StatesGroup):
    poster_id = State()
    seats = State()
    baggage = State()
    confirm = State()
    
class CancelBooking(StatesGroup):
    order_id = State()
    reason = State()
    
class ChatWithUser(StatesGroup):
    user_id = State()
    poster_id = State()
    message = State()
    
class SendLocation(StatesGroup):
    recipient_id = State()


def get_main_keyboard(is_driver=False):
    keyboard = [
        [KeyboardButton(text="üîç –Å—Ñ—Ç–∞–Ω–∏ –ù–∞“õ–ª–∏—ë—Ç")],
        [KeyboardButton(text="üìú –ë—Ä–æ–Ω“≥–æ–∏ –ú–∞–Ω")],
        [KeyboardButton(text="üì® –ß–∞—Ç“≥–æ"), KeyboardButton(text="üîî –û–≥–æ“≥–∏“≥–æ")],
    ]
    
    if is_driver:
        keyboard.append([KeyboardButton(text="üöó –°–∞—Ñ–∞—Ä“≥–æ–∏ –ú–∞–Ω")])
        keyboard.append([KeyboardButton(text="‚ûï –≠—ä–ª–æ–Ω –ö–∞—Ä–¥–∞–Ω–∏ –°–∞—Ñ–∞—Ä–∏ –ù–∞–≤")])
        
    else:
        keyboard.append([KeyboardButton(text="üöó –†–æ–Ω–∞–Ω–¥–∞ –®—É–¥–∞–Ω")])
        
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_phone_keyboard():
    keyboard = [[KeyboardButton(text="üì± –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ä–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)]]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_location_keyboard():
    keyboard = [[KeyboardButton(text="üìç –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –º–∞–∫–æ–Ω–∏ “∑–æ–π–≥–∏—Ä—à–∞–≤”£", request_location=True)]]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_skip_location_keyboard():
    keyboard = [
        [KeyboardButton(text="üìç –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –º–∞–∫–æ–Ω–∏ “∑–æ–π–≥–∏—Ä—à–∞–≤”£", request_location=True)],
        [KeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_poster_inline_keyboard(poster_id):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ò–Ω –°–∞—Ñ–∞—Ä—Ä–æ –ë—Ä–æ–Ω –ö–∞—Ä–¥–∞–Ω", callback_data=f"book_{poster_id}")],
            [InlineKeyboardButton(text="üó£Ô∏è –ë–æ —Ä–æ–Ω–∞–Ω–¥–∞ –≥—É—Ñ—Ç—É–≥”Ø –∫–∞—Ä–¥–∞–Ω", callback_data=f"chat_driver_{poster_id}")]
        ]
    )
    return keyboard

def get_confirm_booking_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –¢–∞—Å–¥–∏“õ –ö–∞—Ä–¥–∞–Ω", callback_data="confirm_booking"),
                InlineKeyboardButton(text="‚ùå –ë–µ–∫–æ—Ä –ö–∞—Ä–¥–∞–Ω", callback_data="cancel_booking")
            ]
        ]
    )
    return keyboard

def get_confirm_poster_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –≠—ä–ª–æ–Ω –ö–∞—Ä–¥–∞–Ω", callback_data="confirm_poster"),
                InlineKeyboardButton(text="‚ùå –ë–µ–∫–æ—Ä –ö–∞—Ä–¥–∞–Ω", callback_data="cancel_poster")
            ]
        ]
    )
    return keyboard

def get_my_ride_keyboard(poster_id):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –¢–∞“ì–π–∏—Ä –¥–æ–¥–∞–Ω", callback_data=f"edit_ride_{poster_id}")],
            [InlineKeyboardButton(text="‚ùå –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω", callback_data=f"cancel_ride_{poster_id}")],
            [InlineKeyboardButton(text="üë• –†”Ø–π—Ö–∞—Ç–∏ –º—É—Å–æ—Ñ–∏—Ä–æ–Ω", callback_data=f"passengers_{poster_id}")]
        ]
    )
    return keyboard

def get_edit_ride_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìç –ú–∞–∫–æ–Ω–∏ –æ“ì–æ–∑", callback_data="edit_from")],
            [InlineKeyboardButton(text="üèÅ –ú–∞–∫–æ–Ω–∏ –∞–Ω“∑–æ–º", callback_data="edit_to")],
            [InlineKeyboardButton(text="üìÖ –°–∞–Ω–∞", callback_data="edit_date")],
            [InlineKeyboardButton(text="üïí –í–∞“õ—Ç", callback_data="edit_time")],
            [InlineKeyboardButton(text="üí∞ –ù–∞—Ä—Ö", callback_data="edit_price")],
            [InlineKeyboardButton(text="üí∫ –®—É–º–æ—Ä–∞–∏ “∑–æ–π“≥–æ", callback_data="edit_seats")],
            [InlineKeyboardButton(text="üß≥ –í–∞–∑–Ω–∏ –±–æ—Ä“≥–æ", callback_data="edit_bags")],
            [InlineKeyboardButton(text="üîô –ë–æ–∑–≥–∞—à—Ç", callback_data="back_to_rides")]
        ]
    )
    return keyboard

def get_passenger_keyboard(user_id, poster_id):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üó£Ô∏è –ü–∞—ë–º —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω", callback_data=f"message_user_{user_id}_{poster_id}")],
            [InlineKeyboardButton(text="üìç –î–∞—Ä—Ö–æ—Å—Ç–∏ –º–∞–∫–æ–Ω–∏ “∑–æ–π–≥–∏—Ä—à–∞–≤”£", callback_data=f"request_location_{user_id}")]
        ]
    )
    return keyboard

def get_booking_keyboard(order_id, driver_id, poster_id):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ –±—Ä–æ–Ω", callback_data=f"cancel_booking_{order_id}")],
            [InlineKeyboardButton(text="üó£Ô∏è –ë–æ —Ä–æ–Ω–∞–Ω–¥–∞ –≥—É—Ñ—Ç—É–≥”Ø –∫–∞—Ä–¥–∞–Ω", callback_data=f"chat_with_driver_{driver_id}_{poster_id}")],
            [InlineKeyboardButton(text="üìç –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –º–∞–∫–æ–Ω–∏ “∑–æ–π–≥–∏—Ä—à–∞–≤”£", callback_data=f"send_location_{driver_id}")]
        ]
    )
    return keyboard

def get_back_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ë–æ–∑–≥–∞—à—Ç", callback_data="back_to_main")]
        ]
    )
    return keyboard

@dp.message(F.text == "üì® –ß–∞—Ç“≥–æ")
async def show_chats(message: Message):
    user = db.get_user(message.from_user.id)
    if not user:
        await message.answer("–õ—É—Ç—Ñ–∞–Ω —Å–∞–±—Ç–∏ –Ω–æ–º —à–∞–≤–µ–¥.")
        return

    conn = db.create_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT DISTINCT poster_id, 
                        CASE 
                            WHEN sender_id = ? THEN receiver_id 
                            ELSE sender_id 
                        END as chat_with
        FROM messages
        WHERE sender_id = ? OR receiver_id = ?
    """, (user['id'], user['id'], user['id']))

    chats = cursor.fetchall()
    conn.close()

    if not chats:
        await message.answer("üì≠ –®—É–º–æ “≥–æ–ª–æ —è–≥–æ–Ω —á–∞—Ç –Ω–∞–¥–æ—Ä–µ–¥.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[]) 

    for chat in chats:
        partner = db.get_user_by_id(chat['chat_with'])
        if not partner:
            continue
        text = f"üí¨ –ë–æ {partner['first_name']}"
        callback = f"chat_{chat['poster_id']}_{partner['id']}" 
        keyboard.inline_keyboard.append([InlineKeyboardButton(text=text, callback_data=callback)])

    await message.answer("üì® –ß–∞—Ç“≥–æ–∏ —à—É–º–æ:", reply_markup=keyboard)



@dp.message(F.text == "üîî –û–≥–æ“≥–∏“≥–æ")
async def show_notifications(message: Message):
    db_user = db.get_user(message.from_user.id)
    if not db_user:
        await message.answer("–õ—É—Ç—Ñ–∞–Ω –∞–≤–≤–∞–ª —Å–∞–±—Ç–∏ –Ω–æ–º —à–∞–≤–µ–¥.")
        return

    notifications = db.get_user_notifications(db_user['id'])

    if notifications:
        text = "üîî –û–≥–æ“≥–∏“≥–æ–∏ –æ—Ö–∏—Ä–∏–Ω:\n\n"
        for note in notifications:
            status = "‚úÖ" if note['is_read'] else "üî¥"
            created = note['created_at'].split()[0] if note['created_at'] else ""
            text += f"{status} {note['message']} ({created})\n"
        await message.answer(text)
    else:
        await message.answer("üì≠ –®—É–º–æ “≥–æ–ª–æ –æ–≥–æ“≥”£ –Ω–∞–¥–æ—Ä–µ–¥.")



def format_datetime(dt_str):
    time_obj = datetime.fromisoformat(dt_str)
    return time_obj.strftime("%d %b %Y, %H:%M")
