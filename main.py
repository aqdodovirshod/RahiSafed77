import asyncio
import logging
import os
from datetime import datetime
import re

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, 
    InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove, FSInputFile, Location
)

import database as db

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = "7686264055:AAHwg2GPH8VnvJRbSv3Ril1ZERbNgXyQF9k"

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
temp_data = {}
os.makedirs("car_photos", exist_ok=True)

class ChatState(StatesGroup):
    chatting = State()

class Registration(StatesGroup):
    phone_number = State()

class PassengerLocation(StatesGroup):
    waiting_for_location = State()

class DriverRegistration(StatesGroup):
    experience = State()
    car_license = State()
    car_photo = State()
    car_model = State()
    car_year = State()
    car_id = State()
    uploading_car_photo = State()
    
class PostRide(StatesGroup):
    from_location = State()
    from_location_map = State()
    to_location = State()
    to_location_map = State()
    date = State()
    time = State()
    price = State()
    seats = State()
    bags = State()
    confirm = State()
    
class EditRide(StatesGroup):
    poster_id = State()
    field = State()
    from_location = State()
    to_location = State()
    date = State()
    time = State()
    price = State()
    seats = State()
    bags = State()
    confirm = State()
    waiting_for_field = State()
    new_time = State()
    new_price = State()
    new_seats = State()
    new_bags = State()
    
class BookRide(StatesGroup):
    poster_id = State()
    seats = State()
    baggage = State()
    confirm = State()
    
class CancelBooking(StatesGroup):
    order_id = State()
    reason = State()
    
class ChatWithUser(StatesGroup):
    user_id = State()
    poster_id = State()
    message = State()
    
class SendLocation(StatesGroup):
    recipient_id = State()


def get_main_keyboard(is_driver=False):
    keyboard = [
        [KeyboardButton(text="üîç –Å—Ñ—Ç–∞–Ω–∏ –ù–∞“õ–ª–∏—ë—Ç")],
        [KeyboardButton(text="üìú –ë—Ä–æ–Ω“≥–æ–∏ –ú–∞–Ω")],
        [KeyboardButton(text="üì® –ß–∞—Ç“≥–æ"), KeyboardButton(text="üîî –û–≥–æ“≥–∏“≥–æ")],
    ]
    
    if is_driver:
        keyboard.append([KeyboardButton(text="üöó –°–∞—Ñ–∞—Ä“≥–æ–∏ –ú–∞–Ω")])
        keyboard.append([KeyboardButton(text="‚ûï –≠—ä–ª–æ–Ω –ö–∞—Ä–¥–∞–Ω–∏ –°–∞—Ñ–∞—Ä–∏ –ù–∞–≤")])
        
    else:
        keyboard.append([KeyboardButton(text="üöó –†–æ–Ω–∞–Ω–¥–∞ –®—É–¥–∞–Ω")])
        
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_phone_keyboard():
    keyboard = [[KeyboardButton(text="üì± –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ä–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)]]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_location_keyboard():
    keyboard = [[KeyboardButton(text="üìç –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –º–∞–∫–æ–Ω–∏ “∑–æ–π–≥–∏—Ä—à–∞–≤”£", request_location=True)]]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_skip_location_keyboard():
    keyboard = [
        [KeyboardButton(text="üìç –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –º–∞–∫–æ–Ω–∏ “∑–æ–π–≥–∏—Ä—à–∞–≤”£", request_location=True)],
        [KeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_poster_inline_keyboard(poster_id):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ò–Ω –°–∞—Ñ–∞—Ä—Ä–æ –ë—Ä–æ–Ω –ö–∞—Ä–¥–∞–Ω", callback_data=f"book_{poster_id}")],
            [InlineKeyboardButton(text="üó£Ô∏è –ë–æ —Ä–æ–Ω–∞–Ω–¥–∞ –≥—É—Ñ—Ç—É–≥”Ø –∫–∞—Ä–¥–∞–Ω", callback_data=f"chat_driver_{poster_id}")]
        ]
    )
    return keyboard

def get_confirm_booking_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –¢–∞—Å–¥–∏“õ –ö–∞—Ä–¥–∞–Ω", callback_data="confirm_booking"),
                InlineKeyboardButton(text="‚ùå –ë–µ–∫–æ—Ä –ö–∞—Ä–¥–∞–Ω", callback_data="cancel_booking")
            ]
        ]
    )
    return keyboard

def get_confirm_poster_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –≠—ä–ª–æ–Ω –ö–∞—Ä–¥–∞–Ω", callback_data="confirm_poster"),
                InlineKeyboardButton(text="‚ùå –ë–µ–∫–æ—Ä –ö–∞—Ä–¥–∞–Ω", callback_data="cancel_poster")
            ]
        ]
    )
    return keyboard

def get_my_ride_keyboard(poster_id):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –¢–∞“ì–π–∏—Ä –¥–æ–¥–∞–Ω", callback_data=f"edit_ride_{poster_id}")],
            [InlineKeyboardButton(text="‚ùå –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω", callback_data=f"cancel_ride_{poster_id}")],
            [InlineKeyboardButton(text="üë• –†”Ø–π—Ö–∞—Ç–∏ –º—É—Å–æ—Ñ–∏—Ä–æ–Ω", callback_data=f"passengers_{poster_id}")]
        ]
    )
    return keyboard

def get_edit_ride_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìç –ú–∞–∫–æ–Ω–∏ –æ“ì–æ–∑", callback_data="edit_from")],
            [InlineKeyboardButton(text="üèÅ –ú–∞–∫–æ–Ω–∏ –∞–Ω“∑–æ–º", callback_data="edit_to")],
            [InlineKeyboardButton(text="üìÖ –°–∞–Ω–∞", callback_data="edit_date")],
            [InlineKeyboardButton(text="üïí –í–∞“õ—Ç", callback_data="edit_time")],
            [InlineKeyboardButton(text="üí∞ –ù–∞—Ä—Ö", callback_data="edit_price")],
            [InlineKeyboardButton(text="üí∫ –®—É–º–æ—Ä–∞–∏ “∑–æ–π“≥–æ", callback_data="edit_seats")],
            [InlineKeyboardButton(text="üß≥ –í–∞–∑–Ω–∏ –±–æ—Ä“≥–æ", callback_data="edit_bags")],
            [InlineKeyboardButton(text="üîô –ë–æ–∑–≥–∞—à—Ç", callback_data="back_to_rides")]
        ]
    )
    return keyboard

def get_passenger_keyboard(user_id, poster_id):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üó£Ô∏è –ü–∞—ë–º —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω", callback_data=f"message_user_{user_id}_{poster_id}")],
            [InlineKeyboardButton(text="üìç –î–∞—Ä—Ö–æ—Å—Ç–∏ –º–∞–∫–æ–Ω–∏ “∑–æ–π–≥–∏—Ä—à–∞–≤”£", callback_data=f"request_location_{user_id}")]
        ]
    )
    return keyboard

def get_booking_keyboard(order_id, driver_id, poster_id):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ –±—Ä–æ–Ω", callback_data=f"cancel_booking_{order_id}")],
            [InlineKeyboardButton(text="üó£Ô∏è –ë–æ —Ä–æ–Ω–∞–Ω–¥–∞ –≥—É—Ñ—Ç—É–≥”Ø –∫–∞—Ä–¥–∞–Ω", callback_data=f"chat_with_driver_{driver_id}_{poster_id}")],
            [InlineKeyboardButton(text="üìç –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –º–∞–∫–æ–Ω–∏ “∑–æ–π–≥–∏—Ä—à–∞–≤”£", callback_data=f"send_location_{driver_id}")]
        ]
    )
    return keyboard

def get_back_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ë–æ–∑–≥–∞—à—Ç", callback_data="back_to_main")]
        ]
    )
    return keyboard

@dp.message(F.text == "üì® –ß–∞—Ç“≥–æ")
async def show_chats(message: Message):
    user = db.get_user(message.from_user.id)
    if not user:
        await message.answer("–õ—É—Ç—Ñ–∞–Ω —Å–∞–±—Ç–∏ –Ω–æ–º —à–∞–≤–µ–¥.")
        return

    conn = db.create_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT DISTINCT poster_id, 
                        CASE 
                            WHEN sender_id = ? THEN receiver_id 
                            ELSE sender_id 
                        END as chat_with
        FROM messages
        WHERE sender_id = ? OR receiver_id = ?
    """, (user['id'], user['id'], user['id']))

    chats = cursor.fetchall()
    conn.close()

    if not chats:
        await message.answer("üì≠ –®—É–º–æ “≥–æ–ª–æ —è–≥–æ–Ω —á–∞—Ç –Ω–∞–¥–æ—Ä–µ–¥.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[]) 

    for chat in chats:
        partner = db.get_user_by_id(chat['chat_with'])
        if not partner:
            continue
        text = f"üí¨ –ë–æ {partner['first_name']}"
        callback = f"chat_{chat['poster_id']}_{partner['id']}" 
        keyboard.inline_keyboard.append([InlineKeyboardButton(text=text, callback_data=callback)])

    await message.answer("üì® –ß–∞—Ç“≥–æ–∏ —à—É–º–æ:", reply_markup=keyboard)



@dp.message(F.text == "üîî –û–≥–æ“≥–∏“≥–æ")
async def show_notifications(message: Message):
    db_user = db.get_user(message.from_user.id)
    if not db_user:
        await message.answer("–õ—É—Ç—Ñ–∞–Ω –∞–≤–≤–∞–ª —Å–∞–±—Ç–∏ –Ω–æ–º —à–∞–≤–µ–¥.")
        return

    notifications = db.get_user_notifications(db_user['id'])

    if notifications:
        text = "üîî –û–≥–æ“≥–∏“≥–æ–∏ –æ—Ö–∏—Ä–∏–Ω:\n\n"
        for note in notifications:
            status = "‚úÖ" if note['is_read'] else "üî¥"
            created = note['created_at'].split()[0] if note['created_at'] else ""
            text += f"{status} {note['message']} ({created})\n"
        await message.answer(text)
    else:
        await message.answer("üì≠ –®—É–º–æ “≥–æ–ª–æ –æ–≥–æ“≥”£ –Ω–∞–¥–æ—Ä–µ–¥.")



def format_datetime(dt_str):
    time_obj = datetime.fromisoformat(dt_str)
    return time_obj.strftime("%d %b %Y, %H:%M")

@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """Handle the /start command"""
    user = db.get_user(message.from_user.id)
    
    if not user:
        user_id = db.create_user(
            telegram_id=message.from_user.id,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        await message.answer(
            f"–°–∞–ª–æ–º, {message.from_user.first_name}! –•—É—à –æ–º–∞–¥–µ–¥ –±–∞ –±–æ—Ç–∏ —Å–∞—ë“≥–∞—Ç.\n"
            f"–ë–∞—Ä–æ–∏ –∏–¥–æ–º–∞ –¥–æ–¥–∞–Ω, –ª—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ —Ö—É–¥—Ä–æ –ø–µ—à–Ω–∏“≥–æ–¥ –∫—É–Ω–µ–¥.",
            reply_markup=get_phone_keyboard()
        )
        await state.set_state(Registration.phone_number)
    else:
        driver = db.get_driver_by_user_id(user['id'])
        is_driver = driver is not None
        
        await message.answer(
            f"–°–∞–ª–æ–º, {user['first_name']}! –®—É–º–æ —á”£ –∫–æ—Ä –∫–∞—Ä–¥–∞–Ω –º–µ—Ö–æ“≥–µ–¥?",
            reply_markup=get_main_keyboard(is_driver)
        )

@dp.message(Registration.phone_number)
async def process_phone(message: Message, state: FSMContext):
    """Process the phone number from the user"""
    if message.contact and message.contact.phone_number:
        db.update_user_phone(message.from_user.id, message.contact.phone_number)
        
        await state.clear()
        await message.answer(
            "–†–∞“≥–º–∞—Ç! –®—É–º–æ –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –±–∞ “õ–∞–π–¥ –≥–∏—Ä–∏—Ñ—Ç–∞ —à—É–¥–µ–¥.",
            reply_markup=get_main_keyboard(is_driver=False)
        )
    else:
        await message.answer(
            "–õ—É—Ç—Ñ–∞–Ω, —Ç—É–≥–º–∞–∏ ¬´–§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ä–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω¬ª-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.",
            reply_markup=get_phone_keyboard()
        )

@dp.message(F.text == "üöó –†–æ–Ω–∞–Ω–¥–∞ –®—É–¥–∞–Ω")
async def become_driver(message: Message, state: FSMContext):
    """Handle driver registration initiation"""
    user = db.get_user(message.from_user.id)
    
    if not user:
        await message.answer(
            "–õ—É—Ç—Ñ–∞–Ω, –∞–≤–≤–∞–ª –±–∞ “õ–∞–π–¥ –≥–∏—Ä–µ–¥. –ë–∞—Ä–æ–∏ –æ“ì–æ–∑ /start -—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥."
        )
        return
    
    driver = db.get_driver_by_user_id(user['id'])
    if driver:
        await message.answer(
            "–®—É–º–æ –∞–ª–ª–∞–∫–∞–π “≥–∞–º—á—É–Ω —Ä–æ–Ω–∞–Ω–¥–∞ –±–∞ “õ–∞–π–¥ –≥–∏—Ä–∏—Ñ—Ç–∞ —à—É–¥–∞–µ–¥!",
            reply_markup=get_main_keyboard(is_driver=True)
        )
        return
    
    await message.answer(
        "–ë–∞—Ä–æ–∏ –±–∞ “õ–∞–π–¥ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω “≥–∞–º—á—É–Ω —Ä–æ–Ω–∞–Ω–¥–∞, –ª—É—Ç—Ñ–∞–Ω —á–∞–Ω–¥ —Å–æ–ª–∏ —Ç–∞“∑—Ä–∏–±–∞–∏ —Ä–æ–Ω–∞–Ω–¥–∞–≥”£ –¥–æ—Ä–µ–¥?",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(DriverRegistration.experience)

@dp.message(DriverRegistration.experience)
async def process_experience(message: Message, state: FSMContext):
    """Process driver experience"""
    try:
        experience = int(message.text)
        if experience < 0:
            raise ValueError("Experience cannot be negative")
            
        await state.update_data(experience=experience)
        await message.answer("–õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º–∏ “õ–∞–π–¥–∏ –º–æ—à–∏–Ω–∞—Ç–æ–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
        await state.set_state(DriverRegistration.car_license)
    except ValueError:
        await message.answer("–õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")

@dp.message(DriverRegistration.car_license)
async def process_car_license(message: Message, state: FSMContext):
    """Process car license"""
    await state.update_data(car_license=message.text)
    await message.answer("–õ—É—Ç—Ñ–∞–Ω –º–æ–¥–µ–ª–∏ –º–æ—à–∏–Ω–∞—Ç–æ–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
    await state.set_state(DriverRegistration.car_model)

@dp.message(DriverRegistration.car_model)
async def process_car_model(message: Message, state: FSMContext):
    """Process car model"""
    await state.update_data(car_model=message.text)
    await message.answer("–õ—É—Ç—Ñ–∞–Ω —Å–æ–ª–∏ –∏—Å—Ç–µ“≥—Å–æ–ª–∏ –º–æ—à–∏–Ω–∞—Ç–æ–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
    await state.set_state(DriverRegistration.car_year)

@dp.message(DriverRegistration.car_year)
async def process_car_year(message: Message, state: FSMContext):
    """Process car year"""
    try:
        car_year = int(message.text)
        current_year = datetime.now().year
        
        if car_year < 1900 or car_year > current_year:
            raise ValueError("Invalid year")
            
        await state.update_data(car_year=car_year)
        await message.answer("–õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º–∏ —à–∏–Ω–æ—Å–Ω–æ–º–∞–∏ –º–æ—à–∏–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
        await state.set_state(DriverRegistration.car_id)
    except ValueError:
        await message.answer(f"–õ—É—Ç—Ñ–∞–Ω —Å–æ–ª–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (1900-{datetime.now().year}):")

@dp.message(DriverRegistration.car_id)
async def process_car_id(message: Message, state: FSMContext):
    """Process car ID"""
    await state.update_data(car_id=message.text)
    await message.answer("–õ—É—Ç—Ñ–∞–Ω –∞–∫—Å–∏ –º–æ—à–∏–Ω–∞—Ç–æ–Ω—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–µ–¥:")
    await state.set_state(DriverRegistration.car_photo)

@dp.message(DriverRegistration.car_photo)
async def process_car_photo(message: Message, state: FSMContext):
    """Process car photo"""
    user = db.get_user(message.from_user.id)
    if not user:
        await message.answer("–•–∞—Ç–æ–≥”£ —Ä”Ø–π –¥–æ–¥. –õ—É—Ç—Ñ–∞–Ω /start-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.")
        await state.clear()
        return
    
    if not message.photo:
        await message.answer("–õ—É—Ç—Ñ–∞–Ω, –∞–∫—Å–∏ –º–æ—à–∏–Ω—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–µ–¥.")
        return
    
    photo = message.photo[-1]
    photo_path = f"car_photos/car_{user['id']}_{message.from_user.id}.jpg"
    
    await bot.download(photo, destination=photo_path)
    
    data = await state.get_data()
    
    driver_id = db.register_driver(
        user['id'],
        data['experience'],
        data['car_license'],
        data['car_model'],
        data['car_year'],
        data['car_id'],
        photo_path
    )
    
    await state.clear()
    await message.answer(
        "–¢–∞–±—Ä–∏–∫! –®—É–º–æ “≥–∞–º—á—É–Ω —Ä–æ–Ω–∞–Ω–¥–∞ –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –±–∞ “õ–∞–π–¥ –≥–∏—Ä–∏—Ñ—Ç–∞ —à—É–¥–µ–¥.\n"
        "–ê–∫–Ω—É–Ω —à—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ —Å–∞—Ñ–∞—Ä“≥–æ —ç—ä–ª–æ–Ω –∫—É–Ω–µ–¥ –≤–∞ –º—É—Å–æ—Ñ–∏—Ä–æ–Ω—Ä–æ “õ–∞–±—É–ª –∫—É–Ω–µ–¥.",
        reply_markup=get_main_keyboard(is_driver=True)
    )

@dp.message(F.text == "‚ûï –≠—ä–ª–æ–Ω –ö–∞—Ä–¥–∞–Ω–∏ –°–∞—Ñ–∞—Ä–∏ –ù–∞–≤")
async def post_new_ride(message: Message, state: FSMContext):
    """Handler for posting a new ride"""
    user = db.get_user(message.from_user.id)
    if not user:
        await message.answer("–õ—É—Ç—Ñ–∞–Ω, –∞–≤–≤–∞–ª –±–∞ “õ–∞–π–¥ –≥–∏—Ä–µ–¥. –ë–∞—Ä–æ–∏ –æ“ì–æ–∑ /start-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.")
        return
    
    driver = db.get_driver_by_user_id(user['id'])
    if not driver:
        await message.answer(
            "–ë–∞—Ä–æ–∏ —ç—ä–ª–æ–Ω –∫–∞—Ä–¥–∞–Ω–∏ —Å–∞—Ñ–∞—Ä, —à—É–º–æ –±–æ—è–¥ –∞–≤–≤–∞–ª “≥–∞–º—á—É–Ω —Ä–æ–Ω–∞–Ω–¥–∞ –±–∞ “õ–∞–π–¥ –≥–∏—Ä–∏—Ñ—Ç–∞ —à–∞–≤–µ–¥.",
            reply_markup=get_main_keyboard(is_driver=False)
        )
        return
    
    await message.answer(
        "–ê–∑ –∫—É“∑–æ —Å–∞—Ñ–∞—Ä—Ä–æ –æ“ì–æ–∑ –º–µ–∫—É–Ω–µ–¥? (—à–∞“≥—Ä —ë “∑–æ–π—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥)",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(PostRide.from_location)

@dp.message(PostRide.from_location)
async def process_from_location(message: Message, state: FSMContext):
    """Process departure location"""
    await state.update_data(from_location=message.text)
    await message.answer(
        "–õ—É—Ç—Ñ–∞–Ω –º–∞–∫–æ–Ω–∏ –¥–∞“õ–∏“õ–∏ –æ“ì–æ–∑–∏ —Å–∞—Ñ–∞—Ä—Ä–æ –¥–∞—Ä —Ö–∞—Ä–∏—Ç–∞ –Ω–∏—à–æ–Ω –¥–∏“≥–µ–¥ (–∏—Ö—Ç–∏—ë—Ä”£):",
        reply_markup=get_skip_location_keyboard()
    )
    await state.set_state(PostRide.from_location_map)

@dp.message(PostRide.from_location_map)
async def process_from_location_map(message: Message, state: FSMContext):
    """Process departure location map coordinates"""
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(from_latitude=None, from_longitude=None)
        await message.answer("–ë–∞ –∫—É“∑–æ —Å–∞—Ñ–∞—Ä –º–µ–∫—É–Ω–µ–¥? (—à–∞“≥—Ä —ë “∑–æ–π—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥)")
        await state.set_state(PostRide.to_location)
        return
    
    if not message.location:
        await message.answer(
            "–õ—É—Ç—Ñ–∞–Ω –ª–æ–∫–∞—Ç—Å–∏—è—Ä–æ –±–æ —Ç—É–≥–º–∞–∏ –∑–µ—Ä–∏–Ω —Ñ–∏—Ä–∏—Å—Ç–µ–¥ —ë '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥:",
            reply_markup=get_skip_location_keyboard()
        )
        return
    
    await state.update_data(
        from_latitude=message.location.latitude,
        from_longitude=message.location.longitude
    )
    
    await message.answer("–ë–∞ –∫—É“∑–æ —Å–∞—Ñ–∞—Ä –º–µ–∫—É–Ω–µ–¥? (—à–∞“≥—Ä —ë “∑–æ–π—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥)")
    await state.set_state(PostRide.to_location)

@dp.message(PostRide.to_location)
async def process_to_location(message: Message, state: FSMContext):
    """Process destination location"""
    await state.update_data(to_location=message.text)
    await message.answer(
        "–õ—É—Ç—Ñ–∞–Ω –º–∞–∫–æ–Ω–∏ –¥–∞“õ–∏“õ–∏ –∞–Ω“∑–æ–º–∏ —Å–∞—Ñ–∞—Ä—Ä–æ –¥–∞—Ä —Ö–∞—Ä–∏—Ç–∞ –Ω–∏—à–æ–Ω –¥–∏“≥–µ–¥ (–∏—Ö—Ç–∏—ë—Ä”£):",
        reply_markup=get_skip_location_keyboard()
    )
    await state.set_state(PostRide.to_location_map)

@dp.message(PostRide.to_location_map)
async def process_to_location_map(message: Message, state: FSMContext):
    """Process destination location map coordinates"""
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(to_latitude=None, to_longitude=None)
        await message.answer(
            "–°–∞–Ω–∞–∏ —Å–∞—Ñ–∞—Ä—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–¥–∞—Ä —Ñ–æ—Ä–º–∞—Ç–∏ –î–î.–ú–ú.–°–°–°–°, –º–∞—Å–∞–ª–∞–Ω 25.05.2025):"
        )
        await state.set_state(PostRide.date)
        return
    
    if not message.location:
        await message.answer(
            "–õ—É—Ç—Ñ–∞–Ω –ª–æ–∫–∞—Ç—Å–∏—è—Ä–æ –±–æ —Ç—É–≥–º–∞–∏ –∑–µ—Ä–∏–Ω —Ñ–∏—Ä–∏—Å—Ç–µ–¥ —ë '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥:",
            reply_markup=get_skip_location_keyboard()
        )
        return
    
    await state.update_data(
        to_latitude=message.location.latitude,
        to_longitude=message.location.longitude
    )
    
    await message.answer(
        "–°–∞–Ω–∞–∏ —Å–∞—Ñ–∞—Ä—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–¥–∞—Ä —Ñ–æ—Ä–º–∞—Ç–∏ –î–î.–ú–ú.–°–°–°–°, –º–∞—Å–∞–ª–∞–Ω 25.05.2025):"
    )
    await state.set_state(PostRide.date)

@dp.message(PostRide.date)
async def process_date(message: Message, state: FSMContext):
    """Process ride date"""
    date_pattern = r"^\d{2}\.\d{2}\.\d{4}$"
    if not re.match(date_pattern, message.text):
        await message.answer(
            "–§–æ—Ä–º–∞—Ç–∏ —Å–∞–Ω–∞ –Ω–æ–¥—É—Ä—É—Å—Ç –∞—Å—Ç. –õ—É—Ç—Ñ–∞–Ω –¥–∞—Ä —à–∞–∫–ª–∏ –î–î.–ú–ú.–°–°–°–° –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥, –º–∞—Å–∞–ª–∞–Ω 25.05.2025:"
        )
        return
    
    try:
        day, month, year = map(int, message.text.split('.'))
        if not (1 <= day <= 31 and 1 <= month <= 12 and 2023 <= year <= 2030):
            raise ValueError("Invalid date range")
            
        await state.update_data(ride_date=message.text)
        await message.answer(
            "–í–∞“õ—Ç–∏ —Å–∞—Ñ–∞—Ä—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–¥–∞—Ä —Ñ–æ—Ä–º–∞—Ç–∏ –°–°:–î–î, –º–∞—Å–∞–ª–∞–Ω 09:30):"
        )
        await state.set_state(PostRide.time)
    except ValueError:
        await message.answer(
            "–°–∞–Ω–∞–∏ –Ω–æ–¥—É—Ä—É—Å—Ç. –õ—É—Ç—Ñ–∞–Ω —Å–∞–Ω–∞–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:"
        )

@dp.message(PostRide.time)
async def process_time(message: Message, state: FSMContext):
    """Process ride time"""
    time_pattern = r"^\d{1,2}:\d{2}$"
    if not re.match(time_pattern, message.text):
        await message.answer(
            "–§–æ—Ä–º–∞—Ç–∏ –≤–∞“õ—Ç –Ω–æ–¥—É—Ä—É—Å—Ç –∞—Å—Ç. –õ—É—Ç—Ñ–∞–Ω –¥–∞—Ä —à–∞–∫–ª–∏ –°–°:–î–î –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥, –º–∞—Å–∞–ª–∞–Ω 09:30:"
        )
        return
    
    try:
        hours, minutes = map(int, message.text.split(':'))
        if not (0 <= hours <= 23 and 0 <= minutes <= 59):
            raise ValueError("Invalid time")
            
        await state.update_data(ride_time=message.text)
        
        await message.answer("–ù–∞—Ä—Ö–∏ —Å–∞—Ñ–∞—Ä—Ä–æ –±–∞ —Å–æ–º–æ–Ω”£ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
        await state.set_state(PostRide.price)
    except ValueError:
        await message.answer("–í–∞“õ—Ç–∏ –Ω–æ–¥—É—Ä—É—Å—Ç. –õ—É—Ç—Ñ–∞–Ω –≤–∞“õ—Ç–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")

@dp.message(PostRide.price)
async def process_price(message: Message, state: FSMContext):
    """Process ride price"""
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError("Price must be positive")
            
        await state.update_data(price=price)
        await message.answer("–®—É–º–æ—Ä–∞–∏ “∑–æ–π“≥–æ–∏ –æ–∑–æ–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
        await state.set_state(PostRide.seats)
    except ValueError:
        await message.answer("–õ—É—Ç—Ñ–∞–Ω –Ω–∞—Ä—Ö–∏ –¥—É—Ä—É—Å—Ç –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (—Ä–∞“õ–∞–º):")

@dp.message(PostRide.seats)
async def process_seats(message: Message, state: FSMContext):
    """Process available seats"""
    try:
        seats = int(message.text)
        if seats <= 0:
            raise ValueError("Seats must be positive")
            
        await state.update_data(seats=seats)
        await message.answer("–®—É–º–æ—Ä–∞–∏ –º–∞–∫—Å–∏–º–∞–ª–∏–∏ “∑–æ–π“≥–æ –±–∞—Ä–æ–∏ –±–æ—Ä“≥–æ—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
        await state.set_state(PostRide.bags)
    except ValueError:
        await message.answer("–õ—É—Ç—Ñ–∞–Ω —à—É–º–æ—Ä–∞–∏ –¥—É—Ä—É—Å—Ç–∏ “∑–æ–π“≥–æ—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (—Ä–∞“õ–∞–º–∏ –±—É—Ç—É–Ω):")

@dp.message(PostRide.bags)
async def process_bags(message: Message, state: FSMContext):
    """Process baggage capacity"""
    try:
        bags = int(message.text)
        if bags < 0:
            raise ValueError("Baggage count cannot be negative")
            
        await state.update_data(bags=bags)
        
        data = await state.get_data()
        
        date_str = data['ride_date']
        time_str = data['ride_time']
        day, month, year = map(int, date_str.split('.'))
        hour, minute = map(int, time_str.split(':'))
        
        confirmation_text = (
            "–õ—É—Ç—Ñ–∞–Ω –º–∞—ä–ª—É–º–æ—Ç—Ä–æ —Ç–∞—Å–¥–∏“õ –∫—É–Ω–µ–¥:\n\n"
            f"üöè –ê–∑: {data['from_location']}\n"
            f"üèÅ –ë–∞: {data['to_location']}\n"
            f"üïí –í–∞“õ—Ç: {date_str} {time_str}\n"
            f"üí∞ –ù–∞—Ä—Ö: {data['price']} —Å–æ–º–æ–Ω”£\n"
            f"üí∫ “∂–æ–π“≥–æ–∏ —Ö–æ–ª”£: {data['seats']}\n"
            f"üß≥ –í–∞–∑–Ω–∏ –±–æ—Ä (—è–∫ –∫–∞—Å): {data['bags']}"
        )
        
        await message.answer(confirmation_text, reply_markup=get_confirm_poster_keyboard())
        await state.set_state(PostRide.confirm)
    except ValueError:
        await message.answer("–õ—É—Ç—Ñ–∞–Ω —à—É–º–æ—Ä–∞–∏ –¥—É—Ä—É—Å—Ç–∏ –±–æ—Ä“≥–æ—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (—Ä–∞“õ–∞–º–∏ –±—É—Ç—É–Ω):")

@dp.callback_query(PostRide.confirm, F.data == "confirm_poster")
async def confirm_poster(callback: CallbackQuery, state: FSMContext):
    """Handle poster confirmation"""
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.message.answer("–•–∞—Ç–æ–≥”£ —Ä”Ø–π –¥–æ–¥. –õ—É—Ç—Ñ–∞–Ω /start-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.")
        await callback.answer()
        await state.clear()
        return
    
    driver = db.get_driver_by_user_id(user['id'])
    if not driver:
        await callback.message.answer("–®—É–º–æ –±–æ—è–¥ –∞–≤–≤–∞–ª “≥–∞–º—á—É–Ω —Ä–æ–Ω–∞–Ω–¥–∞ –±–∞ “õ–∞–π–¥ –≥–∏—Ä–∏—Ñ—Ç–∞ —à–∞–≤–µ–¥.")
        await callback.answer()
        await state.clear()
        return
    
    data = await state.get_data()
    
    date_str = data['ride_date']
    time_str = data['ride_time']
    day, month, year = map(int, date_str.split('.'))
    hour, minute = map(int, time_str.split(':'))
    
    time_to_go = datetime(year, month, day, hour, minute).isoformat()
    
    poster_id = db.create_poster(
        driver_id=driver['id'],
        from_location=data['from_location'],
        to_location=data['to_location'],
        price=data['price'],
        seat_count=data['seats'],
        time_to_go=time_to_go,
        bags_count=data['bags'],
        from_latitude=data.get('from_latitude'),
        from_longitude=data.get('from_longitude'),
        to_latitude=data.get('to_latitude'),
        to_longitude=data.get('to_longitude')
    )
    
    await callback.message.edit_text(
        "‚úÖ –°–∞—Ñ–∞—Ä–∏ —à—É–º–æ –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç —ç—ä–ª–æ–Ω –∫–∞—Ä–¥–∞ —à—É–¥!\n\n"
        "–®—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –æ–Ω—Ä–æ –¥–∞—Ä “õ–∏—Å–º–∞—Ç–∏ ¬´–°–∞—Ñ–∞—Ä“≥–æ–∏ –ú–∞–Ω¬ª –±–∏–Ω–µ–¥."
    )
    
    await callback.answer("–°–∞—Ñ–∞—Ä –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç —ç—ä–ª–æ–Ω –∫–∞—Ä–¥–∞ —à—É–¥!")
    await state.clear()
    
    await callback.message.answer(
        "–®—É–º–æ —á”£ –∫–æ—Ä –∫–∞—Ä–¥–∞–Ω –º–µ—Ö–æ“≥–µ–¥?",
        reply_markup=get_main_keyboard(is_driver=True)
    )

@dp.callback_query(PostRide.confirm, F.data == "cancel_poster")
async def cancel_poster_creation(callback: CallbackQuery, state: FSMContext):
    """Handle poster cancellation"""
    await callback.message.edit_text("‚ùå –≠—ä–ª–æ–Ω–∏ —Å–∞—Ñ–∞—Ä –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥.")
    await callback.answer("–≠—ä–ª–æ–Ω–∏ —Å–∞—Ñ–∞—Ä –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥")
    await state.clear()
    
    user = db.get_user(callback.from_user.id)
    is_driver = False
    if user:
        driver = db.get_driver_by_user_id(user['id'])
        is_driver = driver is not None
    
    await callback.message.answer(
        "–®—É–º–æ —á”£ –∫–æ—Ä –∫–∞—Ä–¥–∞–Ω –º–µ—Ö–æ“≥–µ–¥?",
        reply_markup=get_main_keyboard(is_driver=is_driver)
    )

    